#ifndef __MODULE_GPS_THREAD__
#define __MODULE_GPS_THREAD__

#include <ostream>
#include <stdexcept>
#include <csv/csv-ostream>
#include <utils/utils>

class gps_worker
 {
  private:

   volatile bool spin;
   csv::csv_ostream out;
   gpsmm gps;

 public:

  void stop() { spin=false; }

  void run()
   {
    spin=true;
    while (spin)
     {
      struct gps_data_t * data;

      if (!gps.waiting(50000000))
            continue;

      if ( (data=gps.read())!=0)
       {
        std::cout << "yay?" << std::endl;
        //if(data->fix.mode>=2)
        out << utils::time::time_s(utils::ts::now())
            << data->status
            << data->satellites_used
            << data->satellites_visible
            << data->fix.mode      //
            << data->fix.time      // Time
            << data->fix.ept       // Expected time uncertainty
            << data->fix.latitude  // Latitude in degrees (valid if mode >= 2)
            << data->fix.epy       // Latitude position uncertainty, meters
            << data->fix.longitude // Longitude in degrees (valid if mode >= 2)
            << data->fix.epx       // Longitude position uncertainty, meters
            << data->fix.altitude  // Altitude in meters (valid if mode == 3)
            << data->fix.epv       // Vertical position uncertainty, meters
            << data->fix.track     // Course made good (relative to true north)
            << data->fix.epd       // Track uncertainty, degrees
            << data->fix.speed     // Speed over ground, meters/sec
            << data->fix.eps       // Speed uncertainty, meters/sec
            << data->fix.climb     // Vertical speed, meters/sec
            << data->fix.epc       // Vertical speed uncertainty
            << std::endl;

        //delete data;
       }
      else
       throw std::runtime_error("gpsd read error");

     }
   }

  gps_worker(std::ostream & output_file)
   : spin(false),
     out(output_file),
     gps("localhost", DEFAULT_GPSD_PORT)
  {
   // WATCH_ENABLE enables stream reading
   // WATCH_NMEA exports data in NMEA mode
   if (gps.stream(WATCH_ENABLE | WATCH_NMEA) == 0)
    throw std::runtime_error("gpsd not found?");
  }
 };


#endif
 // __MODULE_GPS_THREAD__

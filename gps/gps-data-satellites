#ifndef __MODULE_GPS_SATELLITES__
#define __MODULE_GPS_SATELLITES__

//////////////////////////////
class gps_data_satellites : public gps_data
 {
  public:

      typedef
       struct 
        {
         int prn,elevation,azimuth,snr;
        } satellite_info;

      struct timeval when;
      int part_nb,nb_parts;
      int nb_satellites; // for this *group* of messages
      std::vector<satellite_info> satellites;

  gps_data_satellites(const std::string & sentence)
   {
    std::vector<std::string> pieces;
    boost::algorithm::split(pieces,sentence,boost::algorithm::is_any_of(",*"));
    
    when=utils::ts::now();
    nb_parts=std::stoi(pieces[1]);
    part_nb=utils::convert::with_default<int>(pieces[2],0);
    nb_satellites=utils::convert::with_default<int>(pieces[3],0);
    
    int sat=pieces.size()-4-1; // -4 = first 4 ones, -1 = last one is checksum
    if (nb_satellites)
     for (int i=0,b=4;i<sat/4;i++,b+=4)
      {
       satellite_info t=
        { utils::convert::with_default<int>(pieces[b+0],0), // prn
          utils::convert::with_default<int>(pieces[b+1],0), // elevation
          utils::convert::with_default<int>(pieces[b+2],0), // azimuth
          utils::convert::with_default<int>(pieces[b+3],0)  // psnr
        };
       satellites.push_back(t);
      }
   }

  virtual ~gps_data_satellites() {}
 };

#endif
 // __MODULE_GPS_SATELLITES__

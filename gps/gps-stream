#ifndef __MODULE_GPS_STREAM__
#define __MODULE_GPS_STREAM__

#include <fstream>
#include <stdexcept>
#include <queue>

#include <boost/asio.hpp>
#include <boost/asio/buffer.hpp>
#include <boost/asio/serial_port_base.hpp>

namespace gps {

class gps_stream
 {
  private:

      boost::asio::io_service io;
      boost::asio::serial_port serial;
      std::string buffer;

  public:

   typedef
   enum { update_2000ms,
          update_1500ms,
          update_1000ms,
          update_750ms,
          update_500ms,
          update_250ms,
          update_200ms,
          update_100ms } gps_update_rate;

  ////////////////////////////
  //
  // Reads from the GPS but reassembles
  // a line that ends in \r\n
  // 
  std::string read()
  {
   std::string t;
   bool found=false;
   do
    {
     const size_t small_buffer_size=10;
     char small_buffer[small_buffer_size];
     
     size_t r=serial.read_some(boost::asio::buffer(small_buffer,small_buffer_size));

     buffer.append(small_buffer,r);

     size_t offset=buffer.find('\n');
     if (offset!=std::string::npos) 
      {
       t=buffer.substr(0,offset-1); // skips \r\n
       buffer.erase(0,offset+1); // erases upto \r\n
       found=true;
      }
    } while (!found);

   return t;
  }

  ////////////////////////////
  //
  // writes a command to the GPS
  //
  void write(std::string command)
   {
    while (command.length())
     {
      size_t w=serial.write_some(boost::asio::buffer(command,command.length()));
      std::cout << "w=" << w << std::endl;
      command.erase(0,w);
     }
   }

  ////////////////////////////
  //
  // adjusts GPS update rate
  // with the help of : http://www.hhhh.org/wiml/proj/nmeaxor.html
  // for checksums
  //
  void set_update_rate( gps_update_rate rate)
   {
    switch (rate)
     {
      case update_2000ms: write("$PMTK220,2000*1C\r\n"); break;
      case update_1500ms: write("$PMTK220,1500*1A\r\n"); break;
      case update_1000ms: write("$PMTK220,1000*1F\r\n"); break;
      case update_750ms: write("$PMTK220,750*2C\r\n"); break;
      case update_500ms: write("$PMTK220,500*2B\r\n"); break;
      case update_250ms: write("$PMTK220,250*29\r\n"); break;
      case update_200ms: write("$PMTK220,200*2C\r\n"); break;
      case update_100ms: write("$PMTK220,100*2F\r\n"); break;
      default:
       throw std::invalid_argument("gps_stream: invalid update rate");
       break;
     }
   }

  gps_stream( const std::string & terminal,
              int baud_rate=38400,
              int bits=8,
              boost::asio::serial_port_base::parity::type parity=
                boost::asio::serial_port_base::parity::none,
              boost::asio::serial_port_base::stop_bits::type stop_bits=
                boost::asio::serial_port_base::stop_bits::one
              )
   : io(),serial(io,terminal)
   {
    if (serial.is_open())
     {
      serial.set_option(boost::asio::serial_port_base::baud_rate(baud_rate));
      serial.set_option(boost::asio::serial_port_base::character_size(bits));
      serial.set_option(boost::asio::serial_port_base::parity(parity));
      serial.set_option(boost::asio::serial_port_base::stop_bits(stop_bits));

      // get GPS to output all NMEA standard fields,
      // with different update rates
      //  0 NMEA_SEN_GLL, // GPGLL interval - Geographic Position - Latitude longitude
      //  1 NMEA_SEN_RMC, // GPRMC interval - Recommended Minimum Specific GNSS Sentence
      //  2 NMEA_SEN_VTG, // GPVTG interval - CourseOver Ground and Ground Speed
      //  3 NMEA_SEN_GGA, // GPGGA interval - GPS Fix Data
      //  4 NMEA_SEN_GSA, // GPGSA interval - GNSS DOPS and Active Satellites
      //  5 NMEA_SEN_GSV, // GPGSV interval - GNSS Satellites in View
      //  6 NMEA_SEN_GRS, // GPGRS interval - GNSS Range Residuals
      //  7 NMEA_SEN_GST, // GPGST interval - GNSS Pseudorange Errors Statistics
      //  8 ?
      //  9 ?
      // 10 ?
      // 11 ?
      // 12 ?
      // 13 NMEA_SEN_MALM, // PMTKALM interval - GPS almanac information
      // 14 NMEA_SEN_MEPH, // PMTKEPH interval - GPS ephmeris information
      // 15 NMEA_SEN_MDGP, // PMTKDGP interval - GPS differential correction information
      // 16 NMEA_SEN_MDBG, // PMTKDBG interval â€“ MTK debug information 
      write("$PMTK514,1,1,1,1,1,5,1,1,1,1,1,1,0,1,1,1,1*2A<\r\n");
     }
    else
     throw std::runtime_error("gps_stream: cannot open "+terminal);
   }

  ~gps_stream()
  {
   serial.close();
  }
};

}

#endif
 // __MODULE_GPS_STREAM__

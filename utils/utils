#ifndef __MODULE__UTILS__
#define __MODULE__UTILS__

#include <stdint.h>
#include <sys/time.h>
#include <string>
#include <stdexcept>

namespace utils
{
 namespace convert
  {
   template <typename T> inline T with_default(const std::string &, const T & default_value)
   { throw std::runtime_error(__PRETTY_FUNCTION__+" not implemented"); }

   template <> inline int with_default(const std::string & s, const int & default_value)
   { return (s=="") ? default_value : std::stoi(s); }

   template <> inline float with_default(const std::string & s, const float & default_value)
   { return (s=="") ? default_value : std::stof(s); }


   } // namespace convert

 namespace ts
  {
   struct timeval now();
  }

 namespace time
  {
   std::string time_s(const struct timeval & tv); // in current tz
   std::string utc_time_s(const struct timeval & tv); // in UTC
   std::string utc_date_s(const struct timeval & tv);
  }

} // namespace utils


#endif
 // __MODULE_UTILS__
